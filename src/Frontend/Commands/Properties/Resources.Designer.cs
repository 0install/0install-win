//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZeroInstall.Commands.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ZeroInstall.Commands.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command &apos;0install&apos; has been added to your command-line PATH..
        /// </summary>
        public static string Added0installToPath {
            get {
                return ResourceManager.GetString("Added0installToPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An alias named &apos;{0}&apos; for &apos;{1}&apos; was created..
        /// </summary>
        public static string AliasCreated {
            get {
                return ResourceManager.GetString("AliasCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No existing alias named &apos;{0}&apos; was found..
        /// </summary>
        public static string AliasNotFound {
            get {
                return ResourceManager.GetString("AliasNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The alias named &apos;{0}&apos; for &apos;{1}&apos; was removed..
        /// </summary>
        public static string AliasRemoved {
            get {
                return ResourceManager.GetString("AliasRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All required components have been downloaded..
        /// </summary>
        public static string AllComponentsDownloaded {
            get {
                return ResourceManager.GetString("AllComponentsDownloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All components required to run {0} have been exported to &apos;{1}&apos;.
        ///You can use the import script or Bootstrap executable in &apos;{1}&apos; to import these files on another computer..
        /// </summary>
        public static string AllComponentsExported {
            get {
                return ResourceManager.GetString("AllComponentsExported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is already in the list of custom implementation caches..
        /// </summary>
        public static string AlreadyInImplDirs {
            get {
                return ResourceManager.GetString("AlreadyInImplDirs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application alias.
        /// </summary>
        public static string AppAlias {
            get {
                return ResourceManager.GetString("AppAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application list.
        /// </summary>
        public static string AppList {
            get {
                return ResourceManager.GetString("AppList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setup Zero Install for all users (machine-wide) instead of just the current user?.
        /// </summary>
        public static string AskDeployMachineWide {
            get {
                return ResourceManager.GetString("AskDeployMachineWide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you want to deploy a new copy of Zero Install to &apos;{0}&apos;?.
        /// </summary>
        public static string AskDeployNewTarget {
            get {
                return ResourceManager.GetString("AskDeployNewTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will add Zero Install to the start menu and command-line. Continue?.
        /// </summary>
        public static string AskDeployZeroInstall {
            get {
                return ResourceManager.GetString("AskDeployZeroInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you want to remove Zero Install from this computer?.
        /// </summary>
        public static string AskRemoveZeroInstall {
            get {
                return ResourceManager.GetString("AskRemoveZeroInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you wish to update any existing desktop integration to reflect this?
        ///If you select &apos;Yes&apos; potentially incompatible integrations will be removed.
        ///If you select &apos;No&apos; Zero Install will continue to use the old capabilities..
        /// </summary>
        public static string AskUpdateCapabilities {
            get {
                return ResourceManager.GetString("AskUpdateCapabilities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cached implementations.
        /// </summary>
        public static string CachedImplementations {
            get {
                return ResourceManager.GetString("CachedImplementations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cached interfaces.
        /// </summary>
        public static string CachedInterfaces {
            get {
                return ResourceManager.GetString("CachedInterfaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string Cancel {
            get {
                return ResourceManager.GetString("Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The capabilities of the application &apos;{0}&apos; have changed..
        /// </summary>
        public static string CapabilitiesChanged {
            get {
                return ResourceManager.GetString("CapabilitiesChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The catalog URI {0} is already registered..
        /// </summary>
        public static string CatalogAlreadyRegistered {
            get {
                return ResourceManager.GetString("CatalogAlreadyRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The catalog URI {0} is not registered..
        /// </summary>
        public static string CatalogNotRegistered {
            get {
                return ResourceManager.GetString("CatalogNotRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Catalog sources.
        /// </summary>
        public static string CatalogSources {
            get {
                return ResourceManager.GetString("CatalogSources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change.
        /// </summary>
        public static string Change {
            get {
                return ResourceManager.GetString("Change", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes found.
        /// </summary>
        public static string ChangesFound {
            get {
                return ResourceManager.GetString("ChangesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking feed.
        /// </summary>
        public static string CheckingFeed {
            get {
                return ResourceManager.GetString("CheckingFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking for updates.
        /// </summary>
        public static string CheckingForUpdates {
            get {
                return ResourceManager.GetString("CheckingForUpdates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click here to choose..
        /// </summary>
        public static string ClickToChoose {
            get {
                return ResourceManager.GetString("ClickToChoose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command.
        /// </summary>
        public static string Command {
            get {
                return ResourceManager.GetString("Command", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command-line arguments:.
        /// </summary>
        public static string CommandLineArguments {
            get {
                return ResourceManager.GetString("CommandLineArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration.
        /// </summary>
        public static string Configuration {
            get {
                return ResourceManager.GetString("Configuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you wish to remove all application files from the Zero Install cache?
        ///These files can downloaded again if needed..
        /// </summary>
        public static string ConfirmPurge {
            get {
                return ResourceManager.GetString("ConfirmPurge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you wish to remove all applications from the &apos;My applications&apos; list? This prevents leftover menu entries after removing Zero Install.
        ///You can create a backup of this list by using &apos;0install sync&apos;..
        /// </summary>
        public static string ConfirmRemoveAll {
            get {
                return ResourceManager.GetString("ConfirmRemoveAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start entering text in the last line to create a new entry.
        ///Select an entire line by clicking in the first column and then press DEL on the keyboard to remove an entry..
        /// </summary>
        public static string DataGridCommandAccessPointHelp {
            get {
                return ResourceManager.GetString("DataGridCommandAccessPointHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set a checkbox to make a capability your desired default handler.
        ///Remove a checkbox to remove a capability&apos;s default status (it still remains available)..
        /// </summary>
        public static string DataGridDefaultAccessPointHelp {
            get {
                return ResourceManager.GetString("DataGridDefaultAccessPointHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to delete the {0} checked element(s) from the cache?.
        /// </summary>
        public static string DeleteCheckedEntries {
            get {
                return ResourceManager.GetString("DeleteCheckedEntries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to delete this entry from the cache?.
        /// </summary>
        public static string DeleteEntry {
            get {
                return ResourceManager.GetString("DeleteEntry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deleting implementation.
        /// </summary>
        public static string DeletingImplementations {
            get {
                return ResourceManager.GetString("DeletingImplementations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A portable version of Zero Install has been deployed to &apos;{0}&apos;.
        ///You can use it by running the ZeroInstall.exe file in the directory..
        /// </summary>
        public static string DeployedPortable {
            get {
                return ResourceManager.GetString("DeployedPortable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using the --portable option you must explicitly specify the target directory..
        /// </summary>
        public static string DeployMissingTargetForPortable {
            get {
                return ResourceManager.GetString("DeployMissingTargetForPortable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified target directory ({0}) is located outside your home directory..
        /// </summary>
        public static string DeployTargetOutsideHome {
            get {
                return ResourceManager.GetString("DeployTargetOutsideHome", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description.
        /// </summary>
        public static string Description {
            get {
                return ResourceManager.GetString("Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create an alias for launching an application via 0install without always having to enter the full URI..
        /// </summary>
        public static string DescriptionAddAlias {
            get {
                return ResourceManager.GetString("DescriptionAddAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add an application to the application list..
        /// </summary>
        public static string DescriptionAddApp {
            get {
                return ResourceManager.GetString("DescriptionAddApp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Register an additional source of implementations (versions) of a program..
        /// </summary>
        public static string DescriptionAddFeed {
            get {
                return ResourceManager.GetString("DescriptionAddFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds an URI to the list of catalogs..
        /// </summary>
        public static string DescriptionCatalogAdd {
            get {
                return ResourceManager.GetString("DescriptionCatalogAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists all registered catalogs..
        /// </summary>
        public static string DescriptionCatalogList {
            get {
                return ResourceManager.GetString("DescriptionCatalogList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refreshes (downloads) all registered catalogs..
        /// </summary>
        public static string DescriptionCatalogRefresh {
            get {
                return ResourceManager.GetString("DescriptionCatalogRefresh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes an URI from the list of catalogs..
        /// </summary>
        public static string DescriptionCatalogRemove {
            get {
                return ResourceManager.GetString("DescriptionCatalogRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resets the list of catalogs to the default source..
        /// </summary>
        public static string DescriptionCatalogReset {
            get {
                return ResourceManager.GetString("DescriptionCatalogReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Searches registered catalogs for applications that match the specified query. If no query is given all applications in the catalogs are listed..
        /// </summary>
        public static string DescriptionCatalogSearch {
            get {
                return ResourceManager.GetString("DescriptionCatalogSearch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opens the central graphical user interface for launching and managing applications..
        /// </summary>
        public static string DescriptionCentral {
            get {
                return ResourceManager.GetString("DescriptionCentral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to View or change configuration settings.
        ///With no arguments, it displays all settings and their current values. With one argument, it displays the current value of the named setting. With two arguments, it sets the setting to the given value or resets it to the default value if the value &quot;default&quot; is given..
        /// </summary>
        public static string DescriptionConfig {
            get {
                return ResourceManager.GetString("DescriptionConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calculates the manifest digest of a directory or archive..
        /// </summary>
        public static string DescriptionDigest {
            get {
                return ResourceManager.GetString("DescriptionDigest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Behaves similarly to &apos;0install select&apos;, except that it also downloads the selected versions if they are not already cached.
        ///Returns an exit status of 0 if it selected a suitable set of versions and they are now all downloaded and in the cache; returns a status of 1 otherwise..
        /// </summary>
        public static string DescriptionDownload {
            get {
                return ResourceManager.GetString("DescriptionDownload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exports all feeds and implementations required to launch the program specified by a URI to a DIRECTORY..
        /// </summary>
        public static string DescriptionExport {
            get {
                return ResourceManager.GetString("DescriptionExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports a feed from a local file, as if it had been downloaded from the network. This is useful when testing a feed file, to avoid uploading it to a remote server in order to download it again.
        ///The file must have a trusted digital signature, as when fetching from the network..
        /// </summary>
        public static string DescriptionImport {
            get {
                return ResourceManager.GetString("DescriptionImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports a set of applications and desktop integrations from an existing app-list.xml file..
        /// </summary>
        public static string DescriptionImportApps {
            get {
                return ResourceManager.GetString("DescriptionImportApps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds an application to the application list (if missing) and integrate it into the desktop environment..
        /// </summary>
        public static string DescriptionIntegrateApp {
            get {
                return ResourceManager.GetString("DescriptionIntegrateApp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists all locally known feed URIs. If a search term is given, only URIs containing that string are shown (case insensitive)..
        /// </summary>
        public static string DescriptionList {
            get {
                return ResourceManager.GetString("DescriptionList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists all applications currently in your application list. If a search term is given, only application names containing that string are shown (case insensitive)..
        /// </summary>
        public static string DescriptionListApps {
            get {
                return ResourceManager.GetString("DescriptionListApps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists all extra feeds added to URI using &apos;0install add-feed&apos;..
        /// </summary>
        public static string DescriptionListFeeds {
            get {
                return ResourceManager.GetString("DescriptionListFeeds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deploys Zero Install to the specified {TARGET} directory or the default directory for programs and integrates it in the system..
        /// </summary>
        public static string DescriptionMaintenanceDeploy {
            get {
                return ResourceManager.GetString("DescriptionMaintenanceDeploy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes the current instance of Zero Install from the system..
        /// </summary>
        public static string DescriptionMaintenanceRemove {
            get {
                return ResourceManager.GetString("DescriptionMaintenanceRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes all applications from the application list and undoes any desktop environment integration. Use this command to clean up the system before removing Zero Install..
        /// </summary>
        public static string DescriptionRemoveAllApps {
            get {
                return ResourceManager.GetString("DescriptionRemoveAllApps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes an application from the application list and undoes any desktop environment integration..
        /// </summary>
        public static string DescriptionRemoveApp {
            get {
                return ResourceManager.GetString("DescriptionRemoveApp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Un-registers a feed, reversing the effect of &apos;0install add-feed&apos;..
        /// </summary>
        public static string DescriptionRemoveFeed {
            get {
                return ResourceManager.GetString("DescriptionRemoveFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reapplies all desktop integrations of applications in the application list..
        /// </summary>
        public static string DescriptionRepairApps {
            get {
                return ResourceManager.GetString("DescriptionRepairApps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Behaves similarly to &apos;0install download&apos;, except that it also runs the program after ensuring it is in the cache.
        ///Returns an exit status of 1 if the download step failed. Otherwise, the exit status will be the exit status of the program being run..
        /// </summary>
        public static string DescriptionRun {
            get {
                return ResourceManager.GetString("DescriptionRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Searches for feeds indexed by the mirror server that match specified keywords. Note that the default mirror server indexes all known feeds, regardless of quality; you must decide whether to trust the programs before running them..
        /// </summary>
        public static string DescriptionSearch {
            get {
                return ResourceManager.GetString("DescriptionSearch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selects a version of the program identified by URI, and compatible versions of all of its dependencies.
        ///Returns an exit status of zero if it selected a set of versions, and a status of 1 if it could not find a consistent set..
        /// </summary>
        public static string DescriptionSelect {
            get {
                return ResourceManager.GetString("DescriptionSelect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updates Zero Install itself to the most recent version..
        /// </summary>
        public static string DescriptionSelfUpdate {
            get {
                return ResourceManager.GetString("DescriptionSelfUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds the contents of a directory or archive to the cache..
        /// </summary>
        public static string DescriptionStoreAdd {
            get {
                return ResourceManager.GetString("DescriptionStoreAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds a directory to the list of custom implementation caches..
        /// </summary>
        public static string DescriptionStoreAddDir {
            get {
                return ResourceManager.GetString("DescriptionStoreAddDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that all implementations in the cache are undamaged.
        ///Additional arguments specify custom cache locations..
        /// </summary>
        public static string DescriptionStoreAudit {
            get {
                return ResourceManager.GetString("DescriptionStoreAudit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copies an implementation into the cache. Similar to &apos;0install store add&apos;, but the digest is extracted from the directory name.
        ///An additional arguments specifies a custom target cache location..
        /// </summary>
        public static string DescriptionStoreCopy {
            get {
                return ResourceManager.GetString("DescriptionStoreCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exports a cached implementation as an archive (ZIP, TAR, etc.). The result can be imported on another machine using &apos;0install store add&apos;..
        /// </summary>
        public static string DescriptionStoreExport {
            get {
                return ResourceManager.GetString("DescriptionStoreExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines the local path of a cached implementation..
        /// </summary>
        public static string DescriptionStoreFind {
            get {
                return ResourceManager.GetString("DescriptionStoreFind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists all implementation cache directories..
        /// </summary>
        public static string DescriptionStoreList {
            get {
                return ResourceManager.GetString("DescriptionStoreList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists all cached implementations. If a feed URI is specified only implementations for that particular feed are listed..
        /// </summary>
        public static string DescriptionStoreListImplementations {
            get {
                return ResourceManager.GetString("DescriptionStoreListImplementations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays a graphical user interface for managing implementations in the cache. Shows associations with cached feeds..
        /// </summary>
        public static string DescriptionStoreManage {
            get {
                return ResourceManager.GetString("DescriptionStoreManage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves disk space by merging identical files with hardlinks.
        ///Additional arguments specify custom cache locations..
        /// </summary>
        public static string DescriptionStoreOptimise {
            get {
                return ResourceManager.GetString("DescriptionStoreOptimise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes all implementations from the cache. Use this command to clean up the system before removing Zero Install. Deleting cache directories manually may be difficult due to the NTFS ACLs employed to protect implementations against modification.
        ///Additional arguments specify custom cache locations..
        /// </summary>
        public static string DescriptionStorePurge {
            get {
                return ResourceManager.GetString("DescriptionStorePurge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes an implementation from the cache..
        /// </summary>
        public static string DescriptionStoreRemove {
            get {
                return ResourceManager.GetString("DescriptionStoreRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes a directory from the list of custom implementation caches..
        /// </summary>
        public static string DescriptionStoreRemoveDir {
            get {
                return ResourceManager.GetString("DescriptionStoreRemoveDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes sure an implementation has not been damaged (i.e. it manifest digest has not changed)..
        /// </summary>
        public static string DescriptionStoreVerify {
            get {
                return ResourceManager.GetString("DescriptionStoreVerify", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Synchronizes the application list with the server..
        /// </summary>
        public static string DescriptionSync {
            get {
                return ResourceManager.GetString("DescriptionSync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks for updates to the program and download them if found.
        ///This is similar to &apos;0install download --refresh&apos;, except that it prints information about whether any changes were found..
        /// </summary>
        public static string DescriptionUpdate {
            get {
                return ResourceManager.GetString("DescriptionUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updates all applications in the application list..
        /// </summary>
        public static string DescriptionUpdateApps {
            get {
                return ResourceManager.GetString("DescriptionUpdateApps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Desktop integration.
        /// </summary>
        public static string DesktopIntegration {
            get {
                return ResourceManager.GetString("DesktopIntegration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Applying desktop integration.
        /// </summary>
        public static string DesktopIntegrationApply {
            get {
                return ResourceManager.GetString("DesktopIntegrationApply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removing desktop integration.
        /// </summary>
        public static string DesktopIntegrationRemove {
            get {
                return ResourceManager.GetString("DesktopIntegrationRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Done.
        /// </summary>
        public static string Done {
            get {
                return ResourceManager.GetString("Done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download complete.
        /// </summary>
        public static string DownloadComplete {
            get {
                return ResourceManager.GetString("DownloadComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enter the URL or local file path of the feed catalog to add:.
        /// </summary>
        public static string EnterCatalogUrl {
            get {
                return ResourceManager.GetString("EnterCatalogUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enter the URL of the new source of implementations for this interface:.
        /// </summary>
        public static string EnterFeedUrl {
            get {
                return ResourceManager.GetString("EnterFeedUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The options {0} and {1} cannot be used together..
        /// </summary>
        public static string ExclusiveOptions {
            get {
                return ResourceManager.GetString("ExclusiveOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An existing copy of Zero Install was detected in &apos;{0}&apos;..
        /// </summary>
        public static string ExistingInstance {
            get {
                return ResourceManager.GetString("ExistingInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export complete..
        /// </summary>
        public static string ExportComplete {
            get {
                return ResourceManager.GetString("ExportComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed was already registered for all appropriate interfaces..
        /// </summary>
        public static string FeedAlreadyRegistered {
            get {
                return ResourceManager.GetString("FeedAlreadyRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feed management.
        /// </summary>
        public static string FeedManagement {
            get {
                return ResourceManager.GetString("FeedManagement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed was not registered for any interfaces..
        /// </summary>
        public static string FeedNotRegistered {
            get {
                return ResourceManager.GetString("FeedNotRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed was successfully registered for the following interfaces:.
        /// </summary>
        public static string FeedRegistered {
            get {
                return ResourceManager.GetString("FeedRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has been replaced by &apos;{1}&apos;. Consider updating..
        /// </summary>
        public static string FeedReplaced {
            get {
                return ResourceManager.GetString("FeedReplaced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed for &apos;{0}&apos; ({1}) has been replaced by &apos;{2}&apos;. Do you want to use the new feed instead?.
        /// </summary>
        public static string FeedReplacedAsk {
            get {
                return ResourceManager.GetString("FeedReplacedAsk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cached feeds.
        /// </summary>
        public static string FeedsCached {
            get {
                return ResourceManager.GetString("FeedsCached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feeds registered for &apos;{0}&apos;.
        /// </summary>
        public static string FeedsRegistered {
            get {
                return ResourceManager.GetString("FeedsRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed was successfully unregistered for the following interfaces:.
        /// </summary>
        public static string FeedUnregistered {
            get {
                return ResourceManager.GetString("FeedUnregistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find file or directory &apos;{0}&apos;..
        /// </summary>
        public static string FileOrDirNotFound {
            get {
                return ResourceManager.GetString("FileOrDirNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use file:///path for absolute paths, not file:/path..
        /// </summary>
        public static string FilePrefixAbsoluteUsage {
            get {
                return ResourceManager.GetString("FilePrefixAbsoluteUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide.
        /// </summary>
        public static string Hide {
            get {
                return ResourceManager.GetString("Hide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This feed does not seem to be for the same application. Add it anyway?
        ///A &lt;feed-for&gt; tag indicates feed compatibility..
        /// </summary>
        public static string IgnoreMissingFeedFor {
            get {
                return ResourceManager.GetString("IgnoreMissingFeedFor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing Zero Install Store Service.
        /// </summary>
        public static string InstallService {
            get {
                return ResourceManager.GetString("InstallService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Integrate {0}.
        /// </summary>
        public static string Integrate {
            get {
                return ResourceManager.GetString("Integrate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your desktop integration selections can not be applied..
        /// </summary>
        public static string IntegrateAppInvalid {
            get {
                return ResourceManager.GetString("IntegrateAppInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to change your selection and try again?.
        /// </summary>
        public static string IntegrateAppRetry {
            get {
                return ResourceManager.GetString("IntegrateAppRetry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please use the GUI version of Zero Install or specify explicit integration options using command-line arguments..
        /// </summary>
        public static string IntegrateAppUseGui {
            get {
                return ResourceManager.GetString("IntegrateAppUseGui", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid argument &apos;{0}&apos;..
        /// </summary>
        public static string InvalidArgument {
            get {
                return ResourceManager.GetString("InvalidArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This program comes with ABSOLUTELY NO WARRANTY, to the extent permitted by law.
        ///You may redistribute copies of this program under the terms of the GNU Lesser General Public License..
        /// </summary>
        public static string LicenseInfo {
            get {
                return ResourceManager.GetString("LicenseInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local path of {0}.
        /// </summary>
        public static string LocalPathOf {
            get {
                return ResourceManager.GetString("LocalPathOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The .manifest file is missing.
        ///Run &apos;0install self-update --force&apos; to fix this..
        /// </summary>
        public static string MaintenanceMissingManifest {
            get {
                return ResourceManager.GetString("MaintenanceMissingManifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing arguments..
        /// </summary>
        public static string MissingArguments {
            get {
                return ResourceManager.GetString("MissingArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &lt;feed-for&gt; element in &apos;{0}&apos;; it can&apos;t be used as a feed for any other interface..
        /// </summary>
        public static string MissingFeedFor {
            get {
                return ResourceManager.GetString("MissingFeedFor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing required value for option {0}..
        /// </summary>
        public static string MissingOptionValue {
            get {
                return ResourceManager.GetString("MissingOptionValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must be an administrator to perform machine-wide operations..
        /// </summary>
        public static string MustBeAdminForMachineWide {
            get {
                return ResourceManager.GetString("MustBeAdminForMachineWide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waiting for all Zero Install instances to end.
        /// </summary>
        public static string MutexWait {
            get {
                return ResourceManager.GetString("MutexWait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to My applications.
        /// </summary>
        public static string MyApps {
            get {
                return ResourceManager.GetString("MyApps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to API hooking not possible due to non-cached implementation..
        /// </summary>
        public static string NoApiHookingNonCacheImpl {
            get {
                return ResourceManager.GetString("NoApiHookingNonCacheImpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The graphical policy editor is not available in command-line mode..
        /// </summary>
        public static string NoCustomizeSelectionsInCli {
            get {
                return ResourceManager.GetString("NoCustomizeSelectionsInCli", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zero Install needs to be setup on your system for desktop integration to work..
        /// </summary>
        public static string NoIntegrationFromCache {
            get {
                return ResourceManager.GetString("NoIntegrationFromCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zero Install is running in portable mode. It needs to be deployed to a permanent location for desktop integration to work. This will be completely independent from your portable copy..
        /// </summary>
        public static string NoIntegrationFromPortable {
            get {
                return ResourceManager.GetString("NoIntegrationFromPortable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No longer used: .
        /// </summary>
        public static string NoLongerUsed {
            get {
                return ResourceManager.GetString("NoLongerUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zero Install is running from a user-specific directory. It needs to be deployed to a directory accessible by all users for machine-wide desktop integration to work..
        /// </summary>
        public static string NoMachineWideIntegrationFromPerUser {
            get {
                return ResourceManager.GetString("NoMachineWideIntegrationFromPerUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When running an implementation the command may not be empty..
        /// </summary>
        public static string NoRunWithEmptyCommand {
            get {
                return ResourceManager.GetString("NoRunWithEmptyCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can only update with Feed URIs, not with selections documents..
        /// </summary>
        public static string NoSelectionsDocumentUpdate {
            get {
                return ResourceManager.GetString("NoSelectionsDocumentUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not available in portable mode..
        /// </summary>
        public static string NotAvailableInPortableMode {
            get {
                return ResourceManager.GetString("NotAvailableInPortableMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not in the list of custom implementation caches..
        /// </summary>
        public static string NotInImplDirs {
            get {
                return ResourceManager.GetString("NotInImplDirs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No updates found.
        /// </summary>
        public static string NoUpdatesFound {
            get {
                return ResourceManager.GetString("NoUpdatesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &amp;Open in file manager.
        /// </summary>
        public static string OpenInFileManager {
            get {
                return ResourceManager.GetString("OpenInFileManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optimization complete.
        /// </summary>
        public static string OptimiseComplete {
            get {
                return ResourceManager.GetString("OptimiseComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {HASH} algorithm to use for the digest..
        /// </summary>
        public static string OptionAlgorithm {
            get {
                return ResourceManager.GetString("OptionAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove an existing alias..
        /// </summary>
        public static string OptionAliasRemove {
            get {
                return ResourceManager.GetString("OptionAliasRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print the interface URI for the given alias..
        /// </summary>
        public static string OptionAliasResolve {
            get {
                return ResourceManager.GetString("OptionAliasResolve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide the graphical user interface and use something like a tray icon instead. Has no effect in command-line mode..
        /// </summary>
        public static string OptionBackground {
            get {
                return ResourceManager.GetString("OptionBackground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically answer questions with defaults when possible. Avoid unnecessary console output (e.g. progress bars)..
        /// </summary>
        public static string OptionBatch {
            get {
                return ResourceManager.GetString("OptionBatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Require a version of the main program earlier than {VERSION}. i.e., force the use of an old version the program..
        /// </summary>
        public static string OptionBefore {
            get {
                return ResourceManager.GetString("OptionBefore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip downloading the catalog to verify it is valid before adding it to the list..
        /// </summary>
        public static string OptionCatalogAddSkipVerify {
            get {
                return ResourceManager.GetString("OptionCatalogAddSkipVerify", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove implementations no longer required after the update..
        /// </summary>
        public static string OptionClean {
            get {
                return ResourceManager.GetString("OptionClean", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of executing the default command, use {COMMAND} instead. Possible command names are defined in the program&apos;s interface.
        ///Set to empty (&quot;&quot;) to ignore the command during selection..
        /// </summary>
        public static string OptionCommand {
            get {
                return ResourceManager.GetString("OptionCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch to a specific tab in the configuration GUI. Possible {TAB}s are &apos;updates&apos;, &apos;storage&apos;, &apos;catalog&apos;, &apos;trust&apos;, &apos;sync&apos; and &apos;advanced&apos;.
        ///Has no effect in text-mode..
        /// </summary>
        public static string OptionConfigTab {
            get {
                return ResourceManager.GetString("OptionConfigTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forces the solver to target a specific {CPU}..
        /// </summary>
        public static string OptionCpu {
            get {
                return ResourceManager.GetString("OptionCpu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show the graphical policy editor. This allows you to customize which version of a program or library to use..
        /// </summary>
        public static string OptionCustomize {
            get {
                return ResourceManager.GetString("OptionCustomize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display the manifest&apos;s digest (enabled by default if --manifest is not set)..
        /// </summary>
        public static string OptionDigest {
            get {
                return ResourceManager.GetString("OptionDigest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose the type of Bootstrapper to place alongside the export..
        /// </summary>
        public static string OptionExportBootstrap {
            get {
                return ResourceManager.GetString("OptionExportBootstrap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Include Zero Install itself in the export alongside the application..
        /// </summary>
        public static string OptionExportIncludeZeroInstall {
            get {
                return ResourceManager.GetString("OptionExportIncludeZeroInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not include implementation archives in the export. Only export feeds..
        /// </summary>
        public static string OptionExportNoImplementations {
            get {
                return ResourceManager.GetString("OptionExportNoImplementations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Perform the update even if the currently installed version is the same or newer..
        /// </summary>
        public static string OptionForceSelfUpdate {
            get {
                return ResourceManager.GetString("OptionForceSelfUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show the built-in help text..
        /// </summary>
        public static string OptionHelp {
            get {
                return ResourceManager.GetString("OptionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add all access points of a specific {CATEGORY}..
        /// </summary>
        public static string OptionIntegrateAdd {
            get {
                return ResourceManager.GetString("OptionIntegrateAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add all available access points..
        /// </summary>
        public static string OptionIntegrateAddAll {
            get {
                return ResourceManager.GetString("OptionIntegrateAddAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the recommended standard access points..
        /// </summary>
        public static string OptionIntegrateAddStandard {
            get {
                return ResourceManager.GetString("OptionIntegrateAddStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove all access points of a specific {CATEGORY}..
        /// </summary>
        public static string OptionIntegrateRemove {
            get {
                return ResourceManager.GetString("OptionIntegrateRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove all access points..
        /// </summary>
        public static string OptionIntegrateRemoveAll {
            get {
                return ResourceManager.GetString("OptionIntegrateRemoveAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the preferred language for the implementation. Use ISO short language codes (e.g. en or en-US).
        ///You can use this option multiple times to specify multiple acceptable languages..
        /// </summary>
        public static string OptionLanguage {
            get {
                return ResourceManager.GetString("OptionLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply the configuration machine-wide (for the entire computer) instead of just for the current user..
        /// </summary>
        public static string OptionMachine {
            get {
                return ResourceManager.GetString("OptionMachine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run the specified executable {MAIN} instead of the default. If it starts with &apos;/&apos; or &apos;\&apos; then the path is relative to the implementation&apos;s top-level directory, whereas otherwise it is relative to the directory containing the default main program.
        ///May not contain command-line arguments! Whitespaces do not need to be escaped..
        /// </summary>
        public static string OptionMain {
            get {
                return ResourceManager.GetString("OptionMain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display more comprehensive documentation for the operation modes..
        /// </summary>
        public static string OptionMan {
            get {
                return ResourceManager.GetString("OptionMan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display the manifest itself (one line for each file or directory)..
        /// </summary>
        public static string OptionManifest {
            get {
                return ResourceManager.GetString("OptionManifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not download the application itself yet. Will be automatically downloaded on first use instead..
        /// </summary>
        public static string OptionNoDownload {
            get {
                return ResourceManager.GetString("OptionNoDownload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Require a version of the main program not earlier than {VERSION}. E.g., if you want to run version 2.0 or later, use --not-before=2.0..
        /// </summary>
        public static string OptionNotBefore {
            get {
                return ResourceManager.GetString("OptionNotBefore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Immediately returns once the chosen program has been launched instead of waiting for it to finish executing. On Windows the exit code is the process ID of the launched program..
        /// </summary>
        public static string OptionNoWait {
            get {
                return ResourceManager.GetString("OptionNoWait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run in off-line mode, overriding the default setting.
        ///In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won&apos;t be downloaded even if the injector already knows about them (e.g. from a previous refresh)..
        /// </summary>
        public static string OptionOffline {
            get {
                return ResourceManager.GetString("OptionOffline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forces the solver to target the operating system {OS}..
        /// </summary>
        public static string OptionOS {
            get {
                return ResourceManager.GetString("OptionOS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a portable installation that can be moved around (e.g., on a thumb drive)..
        /// </summary>
        public static string OptionPortable {
            get {
                return ResourceManager.GetString("OptionPortable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fetch fresh copies of all used feeds..
        /// </summary>
        public static string OptionRefresh {
            get {
                return ResourceManager.GetString("OptionRefresh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restart the &apos;0install central&apos; GUI after the update..
        /// </summary>
        public static string OptionRestartCentral {
            get {
                return ResourceManager.GetString("OptionRestartCentral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options:.
        /// </summary>
        public static string Options {
            get {
                return ResourceManager.GetString("Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show where the selected components are stored on the disk..
        /// </summary>
        public static string OptionShow {
            get {
                return ResourceManager.GetString("OptionShow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select source code rather than a binary. This is used internally by &apos;0compile&apos;..
        /// </summary>
        public static string OptionSource {
            get {
                return ResourceManager.GetString("OptionSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset the synchronization data. Possible {MODE}s are &apos;none&apos; (merge data from client and server normally), &apos;client&apos; (replace all data on client with data from server) and &apos;server&apos; (replace all data on server with data from client)..
        /// </summary>
        public static string OptionSyncReset {
            get {
                return ResourceManager.GetString("OptionSyncReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More verbose output. Use twice for even more verbose output..
        /// </summary>
        public static string OptionVerbose {
            get {
                return ResourceManager.GetString("OptionVerbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display version information..
        /// </summary>
        public static string OptionVersion {
            get {
                return ResourceManager.GetString("OptionVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Require a version of the main program within the given {RANGE}.
        ///Ranges are separated by pipes (|).
        ///Each range is in the form &quot;START..!END&quot;. The range matches versions where START &lt;= VERSION &lt; END. The start or end may be omitted.
        ///A single version number may be used instead of a range to match only that version, or !VERSION to match everything except that version..
        /// </summary>
        public static string OptionVersionRange {
            get {
                return ResourceManager.GetString("OptionVersionRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For any library or sub-component with the given {URI} specifies the version {RANGE} (as for --version)..
        /// </summary>
        public static string OptionVersionRangeFor {
            get {
                return ResourceManager.GetString("OptionVersionRangeFor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add {DIR} to the list of implementation caches to search.
        ///However, new downloads will not be written to this directory..
        /// </summary>
        public static string OptionWithStore {
            get {
                return ResourceManager.GetString("OptionWithStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of executing the chosen program directly, run {COMMAND} PROGRAM ARGS. This is useful for running debuggers and tracing tools on the program (rather than on Zero Install!).
        ///Note that the wrapper is executed in the environment selected by the program; hence, this mechanism cannot be used for sandboxing.
        ///May contain command-line arguments. Whitespaces must be escaped!.
        /// </summary>
        public static string OptionWrapper {
            get {
                return ResourceManager.GetString("OptionWrapper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write selected versions to console as machine-readable XML..
        /// </summary>
        public static string OptionXml {
            get {
                return ResourceManager.GetString("OptionXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Portable mode.
        /// </summary>
        public static string PortableMode {
            get {
                return ResourceManager.GetString("PortableMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties for {0}.
        /// </summary>
        public static string PropertiesFor {
            get {
                return ResourceManager.GetString("PropertiesFor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading cache.
        /// </summary>
        public static string ReadingCache {
            get {
                return ResourceManager.GetString("ReadingCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove.
        /// </summary>
        public static string Remove {
            get {
                return ResourceManager.GetString("Remove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to remove the {0} checked keys from the list?.
        /// </summary>
        public static string RemoveCheckedKeys {
            get {
                return ResourceManager.GetString("RemoveCheckedKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to remove the {0} selected entries from the list?.
        /// </summary>
        public static string RemoveSelectedEntries {
            get {
                return ResourceManager.GetString("RemoveSelectedEntries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removing applications.
        /// </summary>
        public static string RemovingApplications {
            get {
                return ResourceManager.GetString("RemovingApplications", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removing outdated implementations.
        /// </summary>
        public static string RemovingOutdated {
            get {
                return ResourceManager.GetString("RemovingOutdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You may have to close and reopen your terminal for this to become effective..
        /// </summary>
        public static string ReopenTerminal {
            get {
                return ResourceManager.GetString("ReopenTerminal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to reset the list to its original state?.
        /// </summary>
        public static string ResetList {
            get {
                return ResourceManager.GetString("ResetList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolved &apos;{0}&apos; to &apos;{1}&apos; using a catalog..
        /// </summary>
        public static string ResolvedUsingCatalog {
            get {
                return ResourceManager.GetString("ResolvedUsingCatalog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pre-compiling .NET assemblies for faster application startup.
        /// </summary>
        public static string RunNgen {
            get {
                return ResourceManager.GetString("RunNgen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selected implementations.
        /// </summary>
        public static string SelectedImplementations {
            get {
                return ResourceManager.GetString("SelectedImplementations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An update to Zero Install v{0} is available. Install now?.
        /// </summary>
        public static string SelfUpdateAvailable {
            get {
                return ResourceManager.GetString("SelfUpdateAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Zero Install instance was launched as an implementation by another Zero Install instance. It therefore cannot update itself..
        /// </summary>
        public static string SelfUpdateBlocked {
            get {
                return ResourceManager.GetString("SelfUpdateBlocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source and destination directories are the same: {0}.
        /// </summary>
        public static string SourceAndTargetSame {
            get {
                return ResourceManager.GetString("SourceAndTargetSame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set stability policy for {0} to match?.
        /// </summary>
        public static string StabilityPolicyAutoSet {
            get {
                return ResourceManager.GetString("StabilityPolicyAutoSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset stability policy for {0} to default?.
        /// </summary>
        public static string StabilityPolicyReset {
            get {
                return ResourceManager.GetString("StabilityPolicyReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is only a single implementation in the feed. It has a stability rating of &apos;{0}&apos;..
        /// </summary>
        public static string StabilityPolicySingleImplementation {
            get {
                return ResourceManager.GetString("StabilityPolicySingleImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting Zero Install Store Service.
        /// </summary>
        public static string StartService {
            get {
                return ResourceManager.GetString("StartService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stopping Zero Install Store Service.
        /// </summary>
        public static string StopService {
            get {
                return ResourceManager.GetString("StopService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} storage space reclaimed..
        /// </summary>
        public static string StorageReclaimed {
            get {
                return ResourceManager.GetString("StorageReclaimed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Store audit.
        /// </summary>
        public static string StoreAudit {
            get {
                return ResourceManager.GetString("StoreAudit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;0store audit&quot; instead to check all implementations in the store..
        /// </summary>
        public static string StoreVerfiyTryAuditInstead {
            get {
                return ResourceManager.GetString("StoreVerfiyTryAuditInstead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully removed {0}..
        /// </summary>
        public static string SuccessfullyRemoved {
            get {
                return ResourceManager.GetString("SuccessfullyRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supported values: {0}.
        /// </summary>
        public static string SupportedValues {
            get {
                return ResourceManager.GetString("SupportedValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The crypto key is used to encrypt your data locally before transmitting it to the server.
        ///Keep this key secret and use something different for your password. This way nobody can access your data, even if the server were to be compromised..
        /// </summary>
        public static string SyncCryptoKeyDescription {
            get {
                return ResourceManager.GetString("SyncCryptoKeyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many arguments or unknown options..
        /// </summary>
        public static string TooManyArguments {
            get {
                return ResourceManager.GetString("TooManyArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Try {0} --help.
        /// </summary>
        public static string TryHelp {
            get {
                return ResourceManager.GetString("TryHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Try --help with one of these:.
        /// </summary>
        public static string TryHelpWith {
            get {
                return ResourceManager.GetString("TryHelpWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to download the software catalog..
        /// </summary>
        public static string UnableToLoadCatalog {
            get {
                return ResourceManager.GetString("UnableToLoadCatalog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to load feed &apos;{0}&apos;; skipping..
        /// </summary>
        public static string UnableToLoadFeed {
            get {
                return ResourceManager.GetString("UnableToLoadFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstalling Zero Install Store Service.
        /// </summary>
        public static string UninstallService {
            get {
                return ResourceManager.GetString("UninstallService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown command &apos;{0}&apos;..
        /// </summary>
        public static string UnknownCommand {
            get {
                return ResourceManager.GetString("UnknownCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:.
        /// </summary>
        public static string Usage {
            get {
                return ResourceManager.GetString("Usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use default setting.
        /// </summary>
        public static string UseDefaultSetting {
            get {
                return ResourceManager.GetString("UseDefaultSetting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{0}&apos; instead..
        /// </summary>
        public static string UseInstead {
            get {
                return ResourceManager.GetString("UseInstead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use system language.
        /// </summary>
        public static string UseSystemLanguage {
            get {
                return ResourceManager.GetString("UseSystemLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Verify.
        /// </summary>
        public static string Verify {
            get {
                return ResourceManager.GetString("Verify", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Verify implementation.
        /// </summary>
        public static string VerifyImplementation {
            get {
                return ResourceManager.GetString("VerifyImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version information.
        /// </summary>
        public static string VersionInformation {
            get {
                return ResourceManager.GetString("VersionInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Working.
        /// </summary>
        public static string Working {
            get {
                return ResourceManager.GetString("Working", resourceCulture);
            }
        }
    }
}
