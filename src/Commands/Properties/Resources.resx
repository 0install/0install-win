<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DescriptionSelect">
    <value xml:space="preserve">Select a version of the program identified by URI, and compatible versions of all of its dependencies. Returns an exit status of zero if it selected a set of versions, and a status of 1 if it could not find a consistent set.</value>
  </data>
  <data name="DescriptionUpdate">
    <value><![CDATA[Check for updates to the program and download them if found. This is similar to '0install download --refresh', except that it prints information about whether any changes were found.]]></value>
  </data>
  <data name="DescriptionDownload">
    <value><![CDATA[This behaves similarly to '0install select', except that it also downloads the selected versions if they are not already cached. Unlike 'select', it does not print the selected versions by default. Returns an exit status of zero if it selected a suitable set of versions and they are now all downloaded and in the cache; returns a status of 1 otherwise.]]></value>
  </data>
  <data name="DescriptionRun">
    <value><![CDATA[This behaves similarly to '0install download', except that it also runs the program after ensuring it is in the cache. Returns an exit status of 1 if the download step failed. Otherwise, the exit status will be the exit status of the program being run.]]></value>
  </data>
  <data name="DescriptionImport">
    <value xml:space="preserve">Import a feed from a local file, as if it had been downloaded from the network. This is useful when testing a feed file, to avoid uploading it to a remote server in order to download it again. The file must have a trusted digital signature, as when fetching from the network.</value>
  </data>
  <data name="DescriptionList">
    <value xml:space="preserve">List all known interface (program) URIs. If a search term is given, only URIs containing that string are shown (case insensitive).</value>
  </data>
  <data name="DescriptionAddFeed">
    <value xml:space="preserve">Register an additional source of implementations (versions) of a program.</value>
  </data>
  <data name="DescriptionRemoveFeed">
    <value><![CDATA[Un-register a feed, reversing the effect of 'add-feed'. ]]></value>
  </data>
  <data name="DescriptionListFeeds">
    <value><![CDATA[List all extra feeds added to URI using '0install add-feed'.]]></value>
  </data>
  <data name="DescriptionConfig">
    <value><![CDATA[View or change configuration settings. With no arguments, '0install config' displays all configuration settings. With one argument, it displays the current value of the named setting. With two arguments, it sets the setting to the given value.]]></value>
  </data>
  <data name="ActionSelection" xml:space="preserve">
		<value>Selecting implementations</value>
	</data>
  <data name="ActionDownload" xml:space="preserve">
		<value>Downloading application</value>
	</data>
  <data name="ActionUpdate" xml:space="preserve">
		<value>Checking for updates</value>
	</data>
  <data name="ActionRun">
    <value>Preparing to launch application</value>
  </data>
  <data name="OptionBefore" xml:space="preserve">
    <value>Chosen implementation's version number must be earlier than {VERSION}. i.e., force the use of an old version the program.</value>
  </data>
  <data name="OptionCommand" xml:space="preserve">
    <value>Instead of executing the default command, use {COMMAND} instead. Possible command names are defined in the program's interface.</value>
  </data>
  <data name="OptionCpu" xml:space="preserve">
    <value>Forces the solver to target the CPU {CPU}.
Supported values: i386, i486, i586, i686, x86_64, ppc, ppc64</value>
  </data>
  <data name="OptionGui" xml:space="preserve">
    <value>Show the graphical policy editor. This allows you to select which version of a program or library to use.</value>
  </data>
  <data name="OptionXml" xml:space="preserve">
    <value>Write selected versions to console as machine-readable XML.</value>
  </data>
  <data name="OptionMain" xml:space="preserve">
    <value>Run the specified executable {MAIN} instead of the default. If it starts with '/' or '\' then the path is relative to the implementation's top-level directory, whereas otherwise it is relative to the directory containing the default main program.</value>
  </data>
  <data name="OptionNotBefore" xml:space="preserve">
    <value>Chosen implementation's version number must not be earlier than {VERSION}. E.g., if you want to run version 2.0 or later, use --not-before=2.0.</value>
  </data>
  <data name="OptionNoWait" xml:space="preserve">
    <value>Immediately returns once the chosen program has been launched instead of waiting for it to finish executing.</value>
  </data>
  <data name="OptionOffline" xml:space="preserve">
    <value>Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh).</value>
  </data>
  <data name="OptionOS" xml:space="preserve">
    <value>Forces the solver to target the operating system {OS}.
Supported values: Linux, Solaris, MacOSX, Windows</value>
  </data>
  <data name="OptionRefresh" xml:space="preserve">
    <value>Fetch a fresh copy of all used interfaces.</value>
  </data>
  <data name="OptionSource" xml:space="preserve">
    <value>Select source code rather than a binary. This is used internally by '0compile'.</value>
  </data>
  <data name="OptionWithStore" xml:space="preserve">
    <value>Add {DIR} to the list of implementation caches to search.
However, new downloads will not be written to this directory.</value>
  </data>
  <data name="OptionWrapper" xml:space="preserve">
    <value>Instead of executing the chosen program directly, run {COMMAND} PROGRAM ARGS. This is useful for running debuggers and tracing tools on the program (rather than on Zero Install!). Note that the wrapper is executed in the environment selected by the program; hence, this mechanism cannot be used for sandboxing.</value>
  </data>
  <data name="OptionBatch" xml:space="preserve">
    <value>Run in batch mode: don't display progress reports to the user and silently answer all questions with "No". Use a tray icon when in GUI mode.</value>
  </data>
  <data name="OptionVerbose" xml:space="preserve">
    <value>More verbose output. Use twice for even more verbose output.</value>
  </data>
  <data name="OptionHelp" xml:space="preserve">
    <value>Show the built-in help text.</value>
  </data>
  <data name="OptionVersion" xml:space="preserve">
    <value>Display version information.</value>
  </data>
  <data name="OptionShow">
    <value xml:space="preserve">Show were the selected components are stored on the disk.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="UnknownOption" xml:space="preserve">
    <value>Unknown option.</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Unknown command '{0}'.</value>
  </data>
  <data name="MissingArguments" xml:space="preserve">
    <value>Missing arguments.</value>
  </data>
  <data name="TooManyArguments" xml:space="preserve">
    <value>Too many arguments or unknown options.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage:</value>
  </data>
  <data name="NotParsed" xml:space="preserve">
    <value>Parse hasn't been called yet.</value>
  </data>
  <data name="NoInterfaceSpecified" xml:space="preserve">
    <value>No interface ID (feed URI or file path) was specified.</value>
  </data>
	<data name="CommandLineArguments" xml:space="preserve">
		<value>Command-line arguments:</value>
	</data>
  <data name="VersionInformation" xml:space="preserve">
    <value>Version information:</value>
  </data>
  <data name="SelectedImplementations"  xml:space="preserve">
    <value>Selected implementations:</value>
  </data>
	<data name="FoundFeeds" xml:space="preserve">
		<value>Found feeds:</value>
	</data>
	<data name="DownloadComplete" xml:space="preserve">
		<value>Download complete</value>
	</data>
	<data name="AllComponentsDownloaded" xml:space="preserve">
		<value>All required components have been downloaded.</value>
	</data>
  <data name="ChangesFound" xml:space="preserve">
    <value>Changes found:</value>
  </data>
  <data name="NoLongerUsed" xml:space="preserve">
    <value>No longer used: </value>
  </data>
  <data name="NoUpdatesFound" xml:space="preserve">
    <value>No updates found</value>
  </data>
  <data name="NoSelectionsDocumentUpdate" xml:space="preserve">
    <value>Can only update with Feed IDs, not with selections documents.</value>
  </data>
  <data name="UpdateProblem" xml:space="preserve">
		<value>Unable to check for updates</value>
	</data>
  <data name="FeedManagement">
    <value xml:space="preserve">Feed management</value>
  </data>
  <data name="FeedRegistered">
    <value xml:space="preserve">The feed was successfully registered for the following interfaces:
 {0}</value>
  </data>
  <data name="FeedAlreadyRegistered">
    <value xml:space="preserve">The feed was already registered for all appropriate interfaces.</value>
  </data>
  <data name="FeedUnregistered">
    <value xml:space="preserve">The feed was successfully unregistered for the following interfaces:
 {0}</value>
  </data>
  <data name="FeedNotRegistered">
    <value xml:space="preserve">The feed was not registered for any interfaces.</value>
  </data>
  <data name="FeedsRegistered">
    <value xml:space="preserve">Feeds registered for '{0}':</value>
  </data>
  <data name="LicenseInfo">
    <value>
      <![CDATA[This program comes with ABSOLUTELY NO WARRANTY, to the extent permitted by law.
You may redistribute copies of this program under the terms of the GNU Lesser General Public License.]]>
    </value>
  </data>
</root>