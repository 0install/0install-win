//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZeroInstall.Injector.Cli.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ZeroInstall.Injector.Cli.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing arguments. Try {0} --help.
        /// </summary>
        internal static string MissingArguments {
            get {
                return ResourceManager.GetString("MissingArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run in batch mode: don&apos;t display any messages to the user and silently answer all questions with &quot;No&quot;..
        /// </summary>
        internal static string OptionBatch {
            get {
                return ResourceManager.GetString("OptionBatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chosen implementation&apos;s version number must be earlier than {VERSION}. i.e., force the use of an old version the program..
        /// </summary>
        internal static string OptionBefore {
            get {
                return ResourceManager.GetString("OptionBefore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forces the solver to target the CPU {CPU}.
        ///Supported values: i386, i486, i586, i686, x86_64, ppc, ppc64.
        /// </summary>
        internal static string OptionCpu {
            get {
                return ResourceManager.GetString("OptionCpu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download any needed files, but stop before actually running the program..
        /// </summary>
        internal static string OptionDownloadOnly {
            get {
                return ResourceManager.GetString("OptionDownloadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Just print what actions would be taken..
        /// </summary>
        internal static string OptionDryRun {
            get {
                return ResourceManager.GetString("OptionDryRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Register (or unregister) an additional source of implementations. When you check out a developer version of a project, it may contain an XML feed file. To add this version to the list of available versions, use --feed on this XML file. The file is not copied, so you don&apos;t need to re-add the file each time it is updated.
        ///
        ///Note that if you just want to run the program, you can invoke 0launch on the feed file directly (without using --feed). This will force the injector to use that version, but won&apos;t affect  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OptionFeed {
            get {
                return ResourceManager.GetString("OptionFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of running the program, just print the set of chosen implementations as an XML document to stdout. This can be later used with --set-selections.
        ///Use --select-only if you don&apos;t even want to download the packages..
        /// </summary>
        internal static string OptionGetSelections {
            get {
                return ResourceManager.GetString("OptionGetSelections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show the built-in help text..
        /// </summary>
        internal static string OptionHelp {
            get {
                return ResourceManager.GetString("OptionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import from files, not from the network. This is useful when testing a feed file, to avoid uploading it to a remote server in order to download it again. It might also be useful when installing from a CD or similar. The file must have a trusted GPG digital signature, as when fetching from the network. For unsigned interfaces, see --feed..
        /// </summary>
        internal static string OptionImport {
            get {
                return ResourceManager.GetString("OptionImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List all known interface (program) URIs. If a search term is given, only URIs containing that string are shown (case insensitive)..
        /// </summary>
        internal static string OptionList {
            get {
                return ResourceManager.GetString("OptionList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run the specified executable {MAIN} instead of the default. If it starts with &apos;/&apos; or &apos;\&apos; then the path is relative to the implementation&apos;s top-level directory, whereas otherwise it is relative to the directory containing the default main program..
        /// </summary>
        internal static string OptionMain {
            get {
                return ResourceManager.GetString("OptionMain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chosen implementation&apos;s version number must not be earlier than {VERSION}. E.g., if you want to run version 2.0 or later, use --not-before=2.0..
        /// </summary>
        internal static string OptionNotBefore {
            get {
                return ResourceManager.GetString("OptionNotBefore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Immediatley returns once the chosen program has been launched instead of waiting for it to finish executing..
        /// </summary>
        internal static string OptionNoWait {
            get {
                return ResourceManager.GetString("OptionNoWait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won&apos;t be downloaded even if the injector already knows about them (e.g. from a previous refresh)..
        /// </summary>
        internal static string OptionOffline {
            get {
                return ResourceManager.GetString("OptionOffline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forces the solver to target the operating system {OS}.
        ///Supported values: Linux, Solaris, MacOSX, Windows.
        /// </summary>
        internal static string OptionOS {
            get {
                return ResourceManager.GetString("OptionOS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fetch a fresh copy of all used interfaces..
        /// </summary>
        internal static string OptionRefresh {
            get {
                return ResourceManager.GetString("OptionRefresh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download any required feeds and choose a set of implementations, but don&apos;t actually download them. If there are stale feeds, check for updates first (if we&apos;re not off-line)..
        /// </summary>
        internal static string OptionSelectOnly {
            get {
                return ResourceManager.GetString("OptionSelectOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of choosing suitable implementations using the policy, run exactly the versions given in {FILE}. A suitable file can be created using the --get-selections option..
        /// </summary>
        internal static string OptionSetSelections {
            get {
                return ResourceManager.GetString("OptionSetSelections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The implementation of the main (root) interface must have an architecture of the form &apos;*-src&apos; (normally a literal &quot;*&quot;, but could be a compatible OS). Dependencies are normal implementations, not source ones. See 0compile for details..
        /// </summary>
        internal static string OptionSource {
            get {
                return ResourceManager.GetString("OptionSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display version information..
        /// </summary>
        internal static string OptionVersion {
            get {
                return ResourceManager.GetString("OptionVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add {DIR} to the list of implementation caches to search.
        ///However, new downloads will not be written to this directory..
        /// </summary>
        internal static string OptionWithStore {
            get {
                return ResourceManager.GetString("OptionWithStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of executing the chosen program directly, run {COMMAND} PROGRAM ARGS. This is useful for running debuggers and tracing tools on the program (rather than on 0launch!). Note that the wrapper is executed in the environment selected by the program; hence, this mechanism cannot be used for sandboxing..
        /// </summary>
        internal static string OptionWrapper {
            get {
                return ResourceManager.GetString("OptionWrapper", resourceCulture);
            }
        }
    }
}
